[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"e0373972"},"content":"plugins {","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"e0373972"},"content":"    id \u0027java\u0027","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"e0373972"},"content":"    id \u0027application\u0027","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"e0373972"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"e0373972"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"e0373972"},"content":"}","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"e0373972"},"content":"repositories {","lastModifiedDate":"2022-01-17"},{"lineNumber":9,"author":{"gitId":"e0373972"},"content":"    mavenCentral()","lastModifiedDate":"2022-01-17"},{"lineNumber":10,"author":{"gitId":"e0373972"},"content":"}","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":12,"author":{"gitId":"e0373972"},"content":"dependencies {","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"e0373972"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"e0373972"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"e0373972"},"content":"}","lastModifiedDate":"2022-01-17"},{"lineNumber":16,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":17,"author":{"gitId":"e0373972"},"content":"test {","lastModifiedDate":"2022-01-17"},{"lineNumber":18,"author":{"gitId":"e0373972"},"content":"    useJUnitPlatform()","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":20,"author":{"gitId":"e0373972"},"content":"    testLogging {","lastModifiedDate":"2022-01-17"},{"lineNumber":21,"author":{"gitId":"e0373972"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2022-01-17"},{"lineNumber":22,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"e0373972"},"content":"        showExceptions true","lastModifiedDate":"2022-01-17"},{"lineNumber":24,"author":{"gitId":"e0373972"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2022-01-17"},{"lineNumber":25,"author":{"gitId":"e0373972"},"content":"        showCauses true","lastModifiedDate":"2022-01-17"},{"lineNumber":26,"author":{"gitId":"e0373972"},"content":"        showStackTraces true","lastModifiedDate":"2022-01-17"},{"lineNumber":27,"author":{"gitId":"e0373972"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2022-01-17"},{"lineNumber":28,"author":{"gitId":"e0373972"},"content":"    }","lastModifiedDate":"2022-01-17"},{"lineNumber":29,"author":{"gitId":"e0373972"},"content":"}","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"e0373972"},"content":"application {","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"e0373972"},"content":"    mainClassName \u003d \"duke.Duke\"","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"e0373972"},"content":"}","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"e0373972"},"content":"shadowJar {","lastModifiedDate":"2022-01-17"},{"lineNumber":36,"author":{"gitId":"e0373972"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"e0373972"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2022-01-17"},{"lineNumber":38,"author":{"gitId":"e0373972"},"content":"}","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"e0373972"},"content":"checkstyle {","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"e0373972"},"content":"    toolVersion \u003d \u00278.23\u0027","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"e0373972"},"content":"}","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"e0373972"},"content":"run{","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"e0373972"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"e0373972"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"e0373972"},"content":"}","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"e0373972":47}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"e0373972"},"content":"@rem","lastModifiedDate":"2022-01-17"},{"lineNumber":2,"author":{"gitId":"e0373972"},"content":"@rem Copyright 2015 the original author or authors.","lastModifiedDate":"2022-01-17"},{"lineNumber":3,"author":{"gitId":"e0373972"},"content":"@rem","lastModifiedDate":"2022-01-17"},{"lineNumber":4,"author":{"gitId":"e0373972"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"e0373972"},"content":"@rem you may not use this file except in compliance with the License.","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"e0373972"},"content":"@rem You may obtain a copy of the License at","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"e0373972"},"content":"@rem","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"e0373972"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0","lastModifiedDate":"2022-01-17"},{"lineNumber":9,"author":{"gitId":"e0373972"},"content":"@rem","lastModifiedDate":"2022-01-17"},{"lineNumber":10,"author":{"gitId":"e0373972"},"content":"@rem Unless required by applicable law or agreed to in writing, software","lastModifiedDate":"2022-01-17"},{"lineNumber":11,"author":{"gitId":"e0373972"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,","lastModifiedDate":"2022-01-17"},{"lineNumber":12,"author":{"gitId":"e0373972"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","lastModifiedDate":"2022-01-17"},{"lineNumber":13,"author":{"gitId":"e0373972"},"content":"@rem See the License for the specific language governing permissions and","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"e0373972"},"content":"@rem limitations under the License.","lastModifiedDate":"2022-01-17"},{"lineNumber":15,"author":{"gitId":"e0373972"},"content":"@rem","lastModifiedDate":"2022-01-17"},{"lineNumber":16,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":17,"author":{"gitId":"e0373972"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off","lastModifiedDate":"2022-01-17"},{"lineNumber":18,"author":{"gitId":"e0373972"},"content":"@rem ##########################################################################","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"e0373972"},"content":"@rem","lastModifiedDate":"2022-01-17"},{"lineNumber":20,"author":{"gitId":"e0373972"},"content":"@rem  Gradle startup script for Windows","lastModifiedDate":"2022-01-17"},{"lineNumber":21,"author":{"gitId":"e0373972"},"content":"@rem","lastModifiedDate":"2022-01-17"},{"lineNumber":22,"author":{"gitId":"e0373972"},"content":"@rem ##########################################################################","lastModifiedDate":"2022-01-17"},{"lineNumber":23,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":24,"author":{"gitId":"e0373972"},"content":"@rem Set local scope for the variables with windows NT shell","lastModifiedDate":"2022-01-17"},{"lineNumber":25,"author":{"gitId":"e0373972"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal","lastModifiedDate":"2022-01-17"},{"lineNumber":26,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":27,"author":{"gitId":"e0373972"},"content":"set DIRNAME\u003d%~dp0","lastModifiedDate":"2022-01-17"},{"lineNumber":28,"author":{"gitId":"e0373972"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d.","lastModifiedDate":"2022-01-17"},{"lineNumber":29,"author":{"gitId":"e0373972"},"content":"set APP_BASE_NAME\u003d%~n0","lastModifiedDate":"2022-01-17"},{"lineNumber":30,"author":{"gitId":"e0373972"},"content":"set APP_HOME\u003d%DIRNAME%","lastModifiedDate":"2022-01-17"},{"lineNumber":31,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":32,"author":{"gitId":"e0373972"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter.","lastModifiedDate":"2022-01-17"},{"lineNumber":33,"author":{"gitId":"e0373972"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi","lastModifiedDate":"2022-01-17"},{"lineNumber":34,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":35,"author":{"gitId":"e0373972"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.","lastModifiedDate":"2022-01-17"},{"lineNumber":36,"author":{"gitId":"e0373972"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\"","lastModifiedDate":"2022-01-17"},{"lineNumber":37,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":38,"author":{"gitId":"e0373972"},"content":"@rem Find java.exe","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"e0373972"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"e0373972"},"content":"set JAVA_EXE\u003djava.exe","lastModifiedDate":"2022-01-17"},{"lineNumber":42,"author":{"gitId":"e0373972"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261","lastModifiedDate":"2022-01-17"},{"lineNumber":43,"author":{"gitId":"e0373972"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute","lastModifiedDate":"2022-01-17"},{"lineNumber":44,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":45,"author":{"gitId":"e0373972"},"content":"echo.","lastModifiedDate":"2022-01-17"},{"lineNumber":46,"author":{"gitId":"e0373972"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH.","lastModifiedDate":"2022-01-17"},{"lineNumber":47,"author":{"gitId":"e0373972"},"content":"echo.","lastModifiedDate":"2022-01-17"},{"lineNumber":48,"author":{"gitId":"e0373972"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"e0373972"},"content":"echo location of your Java installation.","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"e0373972"},"content":"goto fail","lastModifiedDate":"2022-01-17"},{"lineNumber":52,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":53,"author":{"gitId":"e0373972"},"content":":findJavaFromJavaHome","lastModifiedDate":"2022-01-17"},{"lineNumber":54,"author":{"gitId":"e0373972"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%","lastModifiedDate":"2022-01-17"},{"lineNumber":55,"author":{"gitId":"e0373972"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe","lastModifiedDate":"2022-01-17"},{"lineNumber":56,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":57,"author":{"gitId":"e0373972"},"content":"if exist \"%JAVA_EXE%\" goto execute","lastModifiedDate":"2022-01-17"},{"lineNumber":58,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":59,"author":{"gitId":"e0373972"},"content":"echo.","lastModifiedDate":"2022-01-17"},{"lineNumber":60,"author":{"gitId":"e0373972"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%","lastModifiedDate":"2022-01-17"},{"lineNumber":61,"author":{"gitId":"e0373972"},"content":"echo.","lastModifiedDate":"2022-01-17"},{"lineNumber":62,"author":{"gitId":"e0373972"},"content":"echo Please set the JAVA_HOME variable in your environment to match the","lastModifiedDate":"2022-01-17"},{"lineNumber":63,"author":{"gitId":"e0373972"},"content":"echo location of your Java installation.","lastModifiedDate":"2022-01-17"},{"lineNumber":64,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":65,"author":{"gitId":"e0373972"},"content":"goto fail","lastModifiedDate":"2022-01-17"},{"lineNumber":66,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":67,"author":{"gitId":"e0373972"},"content":":execute","lastModifiedDate":"2022-01-17"},{"lineNumber":68,"author":{"gitId":"e0373972"},"content":"@rem Setup the command line","lastModifiedDate":"2022-01-17"},{"lineNumber":69,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":70,"author":{"gitId":"e0373972"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar","lastModifiedDate":"2022-01-17"},{"lineNumber":71,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":72,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":73,"author":{"gitId":"e0373972"},"content":"@rem Execute Gradle","lastModifiedDate":"2022-01-17"},{"lineNumber":74,"author":{"gitId":"e0373972"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*","lastModifiedDate":"2022-01-17"},{"lineNumber":75,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":76,"author":{"gitId":"e0373972"},"content":":end","lastModifiedDate":"2022-01-17"},{"lineNumber":77,"author":{"gitId":"e0373972"},"content":"@rem End local scope for the variables with windows NT shell","lastModifiedDate":"2022-01-17"},{"lineNumber":78,"author":{"gitId":"e0373972"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd","lastModifiedDate":"2022-01-17"},{"lineNumber":79,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":80,"author":{"gitId":"e0373972"},"content":":fail","lastModifiedDate":"2022-01-17"},{"lineNumber":81,"author":{"gitId":"e0373972"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of","lastModifiedDate":"2022-01-17"},{"lineNumber":82,"author":{"gitId":"e0373972"},"content":"rem the _cmd.exe /c_ return code!","lastModifiedDate":"2022-01-17"},{"lineNumber":83,"author":{"gitId":"e0373972"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1","lastModifiedDate":"2022-01-17"},{"lineNumber":84,"author":{"gitId":"e0373972"},"content":"exit /b 1","lastModifiedDate":"2022-01-17"},{"lineNumber":85,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":86,"author":{"gitId":"e0373972"},"content":":mainEnd","lastModifiedDate":"2022-01-17"},{"lineNumber":87,"author":{"gitId":"e0373972"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal","lastModifiedDate":"2022-01-17"},{"lineNumber":88,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":89,"author":{"gitId":"e0373972"},"content":":omega","lastModifiedDate":"2022-01-17"}],"authorContributionMap":{"e0373972":89}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import duke.command.DoneCommand;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import duke.task.Deadline;","lastModifiedDate":"2021-09-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import duke.task.Event;","lastModifiedDate":"2021-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import duke.task.ToDo;","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.NoSuchFileException;","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-08-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Ui ui;","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Parser parser;","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs Duke application.","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param filePath the file path of the save file for tasks storage.","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Storage storage \u003d new Storage(filePath);","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        TaskList tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            if (!(e instanceof NoSuchFileException)) {","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                ui.showLoadingError(\"Cannot load tasks. May overwrite old tasks, if continue\");","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                e.printStackTrace();","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        parser.capture(\"todo\", ToDo.getCommand(tasks, storage));","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        parser.capture(\"event\", Event.getCommand(tasks, storage));","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        parser.capture(\"deadline\", Deadline.getCommand(tasks, storage));","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        parser.capture(\"list\", new ListCommand(tasks));","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        parser.capture(\"done\", new DoneCommand(tasks, storage));","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        parser.capture(\"delete\", new DeleteCommand(tasks, storage));","lastModifiedDate":"2021-09-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        parser.capture(\"bye\", new ByeCommand());","lastModifiedDate":"2021-09-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        parser.capture(\"find\", new FindCommand(tasks));","lastModifiedDate":"2021-09-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    static void checkWord(String keyWord) throws DukeCheckLineException {","lastModifiedDate":"2021-09-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String keyword \u003d keyWord.toLowerCase();","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!keyword.equals(\"list\") \u0026\u0026 !keyword.equals(\"bye\")","lastModifiedDate":"2021-08-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                \u0026\u0026 !keyword.equals(\"todo\") \u0026\u0026 !keyword.equals(\"done\")","lastModifiedDate":"2021-08-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                \u0026\u0026 !keyword.equals(\"event\") \u0026\u0026 !keyword.equals(\"deadline\")","lastModifiedDate":"2021-09-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                \u0026\u0026 !keyword.equals(\"delete\") \u0026\u0026 !keyword.equals(\"find\")) {","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new DukeCheckLineException();","lastModifiedDate":"2021-08-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-08-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Run Duke application.","lastModifiedDate":"2021-09-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void run() {","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui.showWelcome();","lastModifiedDate":"2021-09-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        while (!isExit \u0026\u0026 ui.hasNextLine()) {","lastModifiedDate":"2021-09-11"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            String[] fullCommand \u003d ui.readCommand().split(\" \");","lastModifiedDate":"2021-09-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            ui.printWithLine(List.of());","lastModifiedDate":"2021-09-11"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            try {","lastModifiedDate":"2021-08-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                checkWord(fullCommand[0]);","lastModifiedDate":"2021-09-11"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                Command c \u003d parser.parse(fullCommand);","lastModifiedDate":"2021-09-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                ui.printCommand(c.run(fullCommand));","lastModifiedDate":"2021-09-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2021-09-11"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            } catch (DukeException | IOException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2021-09-11"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            } catch (DukeCheckLineException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                ui.showError(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-11"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-08-17"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-04"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2021-09-11"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2021-09-11"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"e0373972":1,"-":89}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Parser {","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    private Map\u003cString, Command\u003e commands \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static void checkWord(String keyword) throws DukeCheckLineException {","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        if (keyword \u003d\u003d null) {","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            throw new DukeCheckLineException();","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Capture a command to be returned later.","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param name    the key word that trigger the command.","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param command for mapping the name and to be returned later.","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void capture(String name, Command command) {","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        commands.put(name, command);","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * To check and return an appropriate command.","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param fullCommand the input from user.","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @return command to use for the next processing.","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Command parse(String[] fullCommand) {","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Command command \u003d commands.get(fullCommand[0].toLowerCase());","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            checkWord(fullCommand[0]);","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        } catch (DukeCheckLineException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            return (Command) List.of(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return command;","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"e0373972":1,"-":43}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class ByeCommand implements Command {","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * Returns the message to user when he/she leave.","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"     * @param line array of string input from user.","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"     * @return message to show the user.","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e run(String[] line) {","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return List.of(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Return true to exit the program.","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return true when execute this command to exit the program.","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"e0373972":1,"-":26}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Command {","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"     * Returns the message to user after the command is run.","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @param fullCommand array of command from the user input.","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @return message to the user.","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    List\u003cString\u003e run(String[] fullCommand) throws DukeException, IOException;","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Return false when execute this command.","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return false by default, the program should not exit when run this command.","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    default boolean isExit() {","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return false;","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"e0373972":1,"-":25}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class DeleteCommand implements Command {","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Storage storage;","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public DeleteCommand(TaskList tasks, Storage storage) {","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Remove a task according to the index input by the user.","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param fullCommand fullCommand array of command from the user input.","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @return message to the user.","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws NumberFormatException     catch a error if the user input is not a number.","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IndexOutOfBoundsException catch a error if the input index is out of bound.","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws IOException               if the task cannot be recorded.","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e run(String[] fullCommand) throws NumberFormatException, IndexOutOfBoundsException, IOException {","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            Task deleteItem \u003d tasks.remove(Integer.parseInt(fullCommand[1]) - 1);","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            storage.store(tasks.convertAsLines());","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return List.of(\"Noted. I\u0027ve removed this task: \" + System.lineSeparator() + \"     \" + deleteItem);","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            return List.of(\"☹ OOPS!!! This is not a number: \" + fullCommand[1]);","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            return List.of(\"☹ OOPS!!! The index out of bound: \" + fullCommand[1]);","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"e0373972":1,"-":39}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.task.Task;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class DoneCommand implements Command {","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Storage storage;","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public DoneCommand(TaskList tasks, Storage storage) {","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Marks the task as done and returns the message to user.","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param fullCommand array of command from the user input.","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @return a message to user.","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws NumberFormatException     catch an error if the user input is not a number.","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IndexOutOfBoundsException catch an error if the input index is out of bound.","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws IOException               if the task cannot be recorded.","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e run(String[] fullCommand) throws NumberFormatException, IndexOutOfBoundsException, IOException {","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            Task markItem \u003d tasks.get(Integer.parseInt(fullCommand[1]) - 1);","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            markItem.markAsDone();","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            storage.store(tasks.convertAsLines());","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            return List.of(\"Nice! I\u0027ve marked this task as done: \" + System.lineSeparator() + \"     \" + markItem);","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            return List.of(\"☹ OOPS!!! This is not a number: \" + fullCommand[1]);","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return List.of(\"☹ OOPS!!! The index out of bound: \" + fullCommand[1]);","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"e0373972":1,"-":40}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FindCommand implements Command {","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    private final TaskList tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public FindCommand(TaskList tasks) {","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Return a message with the matching task list.","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param fullCommand array of command from the user input.","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @return a matching task list.","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e run(String[] fullCommand) {","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        String keyWord \u003d String.join(\" \", Arrays.copyOfRange(fullCommand, 1, fullCommand.length));","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        messages.add(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            if (tasks.get(i).toString().contains(keyWord)) {","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                count++;","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                messages.add(\"    \" + count + \".\" + tasks.get(i));","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return messages;","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"e0373972":1,"-":35}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;","lastModifiedDate":"2021-09-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.task.TaskList;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ListCommand implements Command {","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    private TaskList tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public ListCommand(TaskList tasks) {","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Return a message with the task list.","lastModifiedDate":"2021-09-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @param fullCommand array of command from the user input.","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @return message to the user.","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e run(String[] fullCommand) {","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        messages.add(\"Here are the tasks in your list:\");","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            messages.add((i + 1) + \".\" + tasks.get(i));","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return messages;","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-11"}],"authorContributionMap":{"e0373972":1,"-":29}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.DukeCheckLineException;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Deadline extends Time {","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public Deadline(String description, String time) {","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        super(description, time);","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void checkDescription(int index) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d 1) {","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            throw new DukeException();","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static void checkTime(int index) throws DukeCheckLineException {","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new DukeCheckLineException();","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * To generate a Deadline detail and store in the tasks list according to user input.","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @param tasks   the list of tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param storage to save the deadline detail of the task.","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @return a command which generates deadlines task.","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static Command getCommand(TaskList tasks, Storage storage) {","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return fullCommand -\u003e {","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            List\u003cString\u003e commandList \u003d List.of(fullCommand);","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            int position \u003d commandList.indexOf(\"/by\");","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            try {","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                checkDescription(position);","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                checkTime(position);","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                String description \u003d String.join(\" \", commandList.subList(1, position));","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                String time \u003d String.join(\" \", commandList.subList(position + 1, fullCommand.length));","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                Task deadlineTask \u003d new Deadline(description, time);","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                tasks.add(deadlineTask);","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                storage.store(tasks.convertAsLines());","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"e0373972"},"content":"                return List.of(\"Got it. I\u0027ve added this task: \" + System.lineSeparator()","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"e0373972"},"content":"                        + \"     \" + deadlineTask + System.lineSeparator()","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"e0373972"},"content":"                        + \"   Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                return List.of(\"☹ OOPS!!! The description of a \" + \"Deadline\" + \" cannot be empty.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            } catch (DukeCheckLineException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                return List.of(\"☹ OOPS!!! A deadline must have a time.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Return a list of strings that can be saved.","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @return a task list for saving.","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getList() {","lastModifiedDate":"2021-09-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        list.add(\"D\");","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        list.addAll(super.getList());","lastModifiedDate":"2021-09-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        list.add(convertSaveTimeString());","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return list;","lastModifiedDate":"2021-09-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Return a list of strings to user.","lastModifiedDate":"2021-09-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @return this string task.","lastModifiedDate":"2021-09-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + convertTimeString() + \")\";","lastModifiedDate":"2021-09-11"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"e0373972":4,"-":78}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import duke.DukeCheckLineException;","lastModifiedDate":"2021-09-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Event extends Time {","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public Event(String description, String time) {","lastModifiedDate":"2021-08-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        super(description, time);","lastModifiedDate":"2021-09-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void checkDescription(int index) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d 1) {","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            throw new DukeException();","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static void checkTime(int index) throws DukeCheckLineException {","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new DukeCheckLineException();","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * To generate a Event detail and store in the tasks list according to user input.","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @param tasks   the list of tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param storage to save the event detail of the task.","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @return a command which generates events task.","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static Command getCommand(TaskList tasks, Storage storage) {","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return fullCommand -\u003e {","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            List\u003cString\u003e commandList \u003d List.of(fullCommand);","lastModifiedDate":"2021-09-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            int position \u003d commandList.indexOf(\"/at\");","lastModifiedDate":"2021-09-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            try {","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                checkDescription(position);","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                checkTime(position);","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                String description \u003d String.join(\" \", commandList.subList(1, position));","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                String time \u003d String.join(\" \", commandList.subList(position + 1, fullCommand.length));","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                Task eventTask \u003d new Event(description, time);","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                tasks.add(eventTask);","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                storage.store(tasks.convertAsLines());","lastModifiedDate":"2021-09-11"},{"lineNumber":48,"author":{"gitId":"e0373972"},"content":"                return List.of(\"Got it. I\u0027ve added this task: \" + System.lineSeparator()","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"e0373972"},"content":"                        + \"     \" + eventTask + System.lineSeparator()","lastModifiedDate":"2022-01-17"},{"lineNumber":50,"author":{"gitId":"e0373972"},"content":"                        + \"   Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2022-01-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                return List.of(\"☹ OOPS!!! The description of a \" + \"Event\" + \" cannot be empty.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            } catch (DukeCheckLineException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                return List.of(\"☹ OOPS!!! An event must have a time.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Return a list of strings that can be saved.","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @return a task list for saving.","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getList() {","lastModifiedDate":"2021-09-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        list.add(\"E\");","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        list.addAll(super.getList());","lastModifiedDate":"2021-09-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        list.add(convertSaveTimeString());","lastModifiedDate":"2021-09-11"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return list;","lastModifiedDate":"2021-09-11"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Return a list of strings to user.","lastModifiedDate":"2021-09-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @return this string task.","lastModifiedDate":"2021-09-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + convertTimeString() + \")\";","lastModifiedDate":"2021-09-11"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"e0373972":4,"-":78}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Task {","lastModifiedDate":"2021-09-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    protected String description;","lastModifiedDate":"2021-08-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    protected boolean isDone;","lastModifiedDate":"2021-08-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Task(String description) {","lastModifiedDate":"2021-08-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-08-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2021-08-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Marks this task as done.","lastModifiedDate":"2021-09-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void markAsDone() {","lastModifiedDate":"2021-08-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        isDone \u003d true;","lastModifiedDate":"2021-08-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Display the status icon of this task (\" \" or \"x\" symbols) to the user.","lastModifiedDate":"2021-09-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @return status icon.","lastModifiedDate":"2021-09-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2021-08-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return (isDone ? \"x\" : \" \");","lastModifiedDate":"2021-08-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-17"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Return a list of strings to user.","lastModifiedDate":"2021-09-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @return this string task.","lastModifiedDate":"2021-09-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2021-08-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return \"[\" + getStatusIcon() + \"]\" + description;","lastModifiedDate":"2021-08-17"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Return a list of strings that can be saved.","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @return a task list for saving.","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getList() {","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return List.of(isDone ? \"1\" : \"0\", description);","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-17"}],"authorContributionMap":{"e0373972":1,"-":48}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.task;","lastModifiedDate":"2021-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.DukeException;","lastModifiedDate":"2021-09-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.command.Command;","lastModifiedDate":"2021-09-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import duke.Storage;","lastModifiedDate":"2021-09-11"},{"lineNumber":6,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-09-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-09-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ToDo extends Task {","lastModifiedDate":"2021-09-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public ToDo(String description) {","lastModifiedDate":"2021-09-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        super(description);","lastModifiedDate":"2021-08-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void checkDescription(String[] command) throws DukeException {","lastModifiedDate":"2021-09-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        if (command.length \u003d\u003d 1) {","lastModifiedDate":"2021-09-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            throw new DukeException();","lastModifiedDate":"2021-09-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2021-09-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * To generate a Todo detail and store in the tasks list according to user input.","lastModifiedDate":"2021-09-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param tasks   the list of tasks;","lastModifiedDate":"2021-09-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param storage to save the todo detail of the task.","lastModifiedDate":"2021-09-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @return a command which generates todo task.","lastModifiedDate":"2021-09-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static Command getCommand(TaskList tasks, Storage storage) {","lastModifiedDate":"2021-09-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return fullCommand -\u003e {","lastModifiedDate":"2021-09-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            try {","lastModifiedDate":"2021-09-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                checkDescription(fullCommand);","lastModifiedDate":"2021-09-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                String[] keyword \u003d Arrays.copyOfRange(fullCommand, 1, fullCommand.length);","lastModifiedDate":"2021-09-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                Task todoTask \u003d new ToDo(String.join(\" \", keyword));","lastModifiedDate":"2021-09-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                tasks.add(todoTask);","lastModifiedDate":"2021-09-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                storage.store(tasks.convertAsLines());","lastModifiedDate":"2021-09-11"},{"lineNumber":38,"author":{"gitId":"e0373972"},"content":"                return List.of(\"Got it. I\u0027ve added this task: \" + System.lineSeparator()","lastModifiedDate":"2022-01-17"},{"lineNumber":39,"author":{"gitId":"e0373972"},"content":"                        + \"     \" + todoTask + System.lineSeparator()","lastModifiedDate":"2022-01-17"},{"lineNumber":40,"author":{"gitId":"e0373972"},"content":"                        + \"   Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2022-01-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2021-09-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                return List.of(\"☹ OOPS!!! The description of a \" + \"todo\" + \" cannot be empty.\");","lastModifiedDate":"2021-09-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2021-09-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2021-09-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Return a list of strings to user.","lastModifiedDate":"2021-09-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @return this string task.","lastModifiedDate":"2021-09-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-08-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2021-08-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2021-08-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-08-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-11"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-09-11"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Return a list of strings that can be saved.","lastModifiedDate":"2021-09-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2021-09-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @return a task list for saving.","lastModifiedDate":"2021-09-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-09-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-11"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getList() {","lastModifiedDate":"2021-09-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-09-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        list.add(\"T\");","lastModifiedDate":"2021-09-11"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        list.addAll(super.getList());","lastModifiedDate":"2021-09-11"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return list;","lastModifiedDate":"2021-09-11"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-08-21"}],"authorContributionMap":{"e0373972":4,"-":65}},{"path":"src/test/java/duke/StorageTemp.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke;","lastModifiedDate":"2021-09-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class StorageTemp extends Storage {","lastModifiedDate":"2021-09-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e stored;","lastModifiedDate":"2021-09-12"},{"lineNumber":7,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public StorageTemp() {","lastModifiedDate":"2021-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"StorageTemp.txt\");","lastModifiedDate":"2021-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-09-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void store(List\u003cString\u003e lines) {","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        stored \u003d lines;","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"e0373972":1,"-":15}},{"path":"src/test/java/duke/command/DoneCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.command;","lastModifiedDate":"2021-09-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import duke.StorageTemp;","lastModifiedDate":"2021-09-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import duke.task.TaskListTemp;","lastModifiedDate":"2021-09-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-12"},{"lineNumber":6,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class DoneCommandTest {","lastModifiedDate":"2021-09-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final TaskListTemp taskListTemp \u003d new TaskListTemp();","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final StorageTemp storageTemp \u003d new StorageTemp();","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    void run() throws IOException {","lastModifiedDate":"2021-09-12"},{"lineNumber":18,"author":{"gitId":"e0373972"},"content":"        List\u003cString\u003e expected \u003d List.of(\"Nice! I\u0027ve marked this task as done: \" + System.lineSeparator()","lastModifiedDate":"2022-01-17"},{"lineNumber":19,"author":{"gitId":"e0373972"},"content":"                + \"     \" + \"[x]get 2\");","lastModifiedDate":"2022-01-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e actual \u003d new DoneCommand(taskListTemp, storageTemp).run(new String[]{\"done\", \"3\"});","lastModifiedDate":"2021-09-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2021-09-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"e0373972":3,"-":20}},{"path":"src/test/java/duke/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package duke.task;","lastModifiedDate":"2021-09-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-09-12"},{"lineNumber":4,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2021-09-12"},{"lineNumber":6,"author":{"gitId":"e0373972"},"content":"","lastModifiedDate":"2022-01-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-09-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"class TaskTest {","lastModifiedDate":"2021-09-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    Task task \u003d new Task(\"read book\");","lastModifiedDate":"2021-09-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-09-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    void getStatusIconIncomplete() {","lastModifiedDate":"2021-09-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertEquals(\" \", task.getStatusIcon());","lastModifiedDate":"2021-09-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-09-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    void getStatusIconComplete() {","lastModifiedDate":"2021-09-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        task.markAsDone();","lastModifiedDate":"2021-09-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertEquals(\"x\", task.getStatusIcon());","lastModifiedDate":"2021-09-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-09-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    void getListIncomplete() {","lastModifiedDate":"2021-09-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertEquals(List.of(\"0\", \"read book\"), task.getList());","lastModifiedDate":"2021-09-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-09-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    void getListComplete() {","lastModifiedDate":"2021-09-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        task.markAsDone();","lastModifiedDate":"2021-09-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(List.of(\"1\", \"read book\"), task.getList());","lastModifiedDate":"2021-09-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-09-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    void testToStringComplete() {","lastModifiedDate":"2021-09-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(\"[\" + \" \" + \"]\" + \"read book\", task.toString());","lastModifiedDate":"2021-09-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-09-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-09-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    void testToStringIncomplete() {","lastModifiedDate":"2021-09-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        task.markAsDone();","lastModifiedDate":"2021-09-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(\"[\" + \"x\" + \"]\" + \"read book\", task.toString());","lastModifiedDate":"2021-09-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-09-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-09-12"}],"authorContributionMap":{"e0373972":2,"-":42}}]
